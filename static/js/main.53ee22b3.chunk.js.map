{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/NewTodo.js","components/FilterList.js","App.js","index.js"],"names":["Todo","todo","toggleCheck","deleteTodo","id","title","completed","className","type","checked","onChange","htmlFor","onClick","TodoList","todos","map","key","NewTodo","state","event","target","name","value","setState","trimLeft","onSubmit","preventDefault","addTodo","props","trim","uuid","this","placeholder","React","Component","FilterList","selectFilter","activeFilter","filter","classNames","selected","todosFromServer","App","prevstate","prevState","checkAll","every","clearCompleted","unfinishedTodos","finishedTodos","visibleTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53ee22b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, toggleCheck, deleteTodo }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          checked={completed}\n          onChange={() => toggleCheck(id)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({ todos, deleteTodo, toggleCheck }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        deleteTodo={deleteTodo}\n        toggleCheck={toggleCheck}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { uuid } from 'uuidv4';\n\nexport class NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  onChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value.trimLeft(),\n    });\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n    const { addTodo } = this.props;\n    const { title } = this.state;\n\n    if (title) {\n      addTodo({\n        title: title.trim(),\n        id: uuid(),\n        completed: false,\n      });\n    }\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"title\"\n          value={title}\n          onChange={this.onChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nexport const FilterList = ({ selectFilter, activeFilter }) => {\n  const filters = ['All', 'Active', 'Completed'];\n\n  return (\n    <ul className=\"filters\">\n      {filters.map(filter => (\n        <li key={filter}>\n          <button\n            type=\"button\"\n            name={filter}\n            className={\n              classNames({ selected: filter === activeFilter })\n            }\n            onClick={event => selectFilter(event.target.name)}\n          >\n            {filter}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nFilterList.propTypes = {\n  selectFilter: PropTypes.func.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { NewTodo } from './components/NewTodo';\nimport { FilterList } from './components/FilterList';\n\nconst todosFromServer = [\n  {\n    title: 'Eat',\n    id: '1',\n    completed: false,\n  },\n  {\n    title: 'Sleep',\n    id: '2',\n    completed: false,\n  },\n];\n\nexport class App extends React.Component {\n  state = {\n    todos: todosFromServer,\n    activeFilter: 'All',\n  };\n\n  addTodo = (todo) => {\n    this.setState(prevstate => ({\n      todos: [...prevstate.todos, todo],\n    }));\n  };\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  toggleCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  checkAll = () => {\n    const { todos } = this.state;\n\n    if (todos.every(todo => todo.completed === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  clearCompleted = () => {\n    this.setState(prevstate => ({\n      todos: prevstate.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  selectFilter = (name) => {\n    this.setState({\n      activeFilter: name,\n    });\n  }\n\n  render() {\n    const { todos, activeFilter } = this.state;\n    const unfinishedTodos = [...todos].filter(todo => todo.completed === false);\n    const finishedTodos = [...todos].filter(todo => todo.completed === true);\n\n    let visibleTodos = [];\n\n    switch (activeFilter) {\n      case 'All':\n        visibleTodos = todos;\n        break;\n      case 'Completed':\n        visibleTodos = finishedTodos;\n        break;\n      case 'Active':\n        visibleTodos = unfinishedTodos;\n        break;\n      default:\n        visibleTodos = todos;\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.checkAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={visibleTodos}\n            deleteTodo={this.deleteTodo}\n            toggleCheck={this.toggleCheck}\n          />\n\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${unfinishedTodos.length} items left`}\n          </span>\n\n          <FilterList\n            selectFilter={this.selectFilter}\n            activeFilter={activeFilter}\n          />\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}